{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "PrePilot.Cloud Architectural Blueprint",
    "version": "1.0.0",
    "description": "The single source of truth for all architectural rules, folder structures, and engineering standards for the PrePilot.Cloud application. This configuration must be strictly adhered to by all developers and AI agents.",
    "lastUpdated": "2024-09-24",
    "enforcedBy": "AI Staff Engineer, CI/CD Pipeline, ESLint, TypeScript Compiler",
  
    "projectStandards": {
      "techStack": {
        "language": "TypeScript",
        "framework": "React (v18+) with Vite",
        "styling": "Tailwind CSS",
        "stateManagement": "Zustand (Global), React Hooks (Local)",
        "animation": "Framer Motion",
        "icons": "react-icons"
      },
      "codeQuality": {
        "namingConvention": {
          "components": "PascalCase (e.g., HeroSection.tsx)",
          "hooks": "camelCase with 'use' prefix (e.g., useTheme.ts)",
          "utils": "camelCase (e.g., formatCurrency.ts)",
          "variables": "camelCase",
          "constants": "UPPER_SNAKE_CASE"
        },
        "documentation": {
          "headerComment": "Mandatory on all .ts/.tsx files. Must include @file, @description, and the official attribution.",
          "attribution": "Crafted By Jedar-Agency.com Tech Team",
          "componentComments": "Mandatory JSDoc-style comments in Arabic explaining the component's purpose and props.",
          "hookComments": "Mandatory JSDoc-style comments in Arabic explaining the hook's purpose and return value."
        }
      }
    },
  
    "directoryStructure": {
      "description": "Defines the mandatory folder structure. No component or logic should exist outside this defined structure.",
      "root": "src/",
      "layout": [
        {
          "path": "src/components/",
          "purpose": "Global, reusable components.",
          "subdirectories": [
            { "path": "ui/", "purpose": "Primitive, stateless UI components (Button, Card, Icon, etc.)." },
            { "path": "layout/", "purpose": "High-level layout components (DashboardLayout, Sidebar, etc.)." },
            { "path": "shared/", "purpose": "Complex components shared across multiple features." }
          ]
        },
        {
          "path": "src/features/",
          "purpose": "Self-contained feature modules. Each feature is a mini-application.",
          "subdirectories": [
            { "path": "landing/", "purpose": "The entire homepage ecosystem, isolated from the app." },
            { "path": "playground/", "purpose": "Components related to the campaign creation form." },
            { "path": "dashboard/", "purpose": "Components for the results dashboard." },
            { "path": "export/", "purpose": "Components for the Export Center & Publishing Hub." }
          ]
        },
        {
          "path": "src/pages/",
          "purpose": "Top-level page components that assemble features and components."
        },
        {
          "path": "src/engine/",
          "purpose": "The core backend logic, separated from the UI.",
          "subdirectories": [
            { "path": "core/", "purpose": "The main engine orchestrator (`prepilot.engine.ts`)." },
            { "path": "modules/", "purpose": "Deterministic calculation logic (KPIs, budget)." },
            { "path": "validation/", "purpose": "Validation rules and guardrails." },
            { "path": "ai/", "purpose": "AI-specific logic (prompts, generators)." }
          ]
        },
        {
          "path": "src/data/",
          "purpose": "The engine's knowledge base. Contains all benchmark and modifier data."
        },
        {
          "path": "src/hooks/",
          "purpose": "Global, reusable custom React hooks."
        },
        {
          "path": "src/types/",
          "purpose": "Global TypeScript type definitions."
        },
        {
          "path": "src/utils/",
          "purpose": "Generic, reusable utility functions."
        },
        {
          "path": "src/services/",
          "purpose": "Clients for external APIs (e.g., aiClient.ts)."
        }
      ]
    },
  
    "architecturalRules": {
      "unidirectionalDependency": {
        "ruleId": "ARC-01",
        "description": "Imports must only flow downwards in the hierarchy (Pages -> Features/Components -> Hooks/Engine -> Utils -> Types/Constants). Violations are a critical error.",
        "enforcement": "TypeScript path aliases and ESLint `no-restricted-imports` rule."
      },
      "componentModularity": {
        "ruleId": "ARC-02",
        "description": "Components must adhere to the Single Responsibility Principle and be decomposed if they become too large or complex.",
        "metrics": {
          "maxLinesOfCode": 250,
          "maxUseEffectHooks": 3
        },
        "enforcement": "Code review and AI-driven refactoring prompts."
      },
      "iconographyMandate": {
        "ruleId": "ARC-03",
        "description": "Emojis are strictly forbidden in JSX. All icons must be implemented using the `react-icons` library, primarily from the Feather (`fi`) set.",
        "enforcement": "ESLint rule and code review."
      },
      "themingMandate": {
        "ruleId": "ARC-04",
        "description": "All colors must be applied via the theme-aware Tailwind CSS variables (e.g., `bg-background`, `text-primary-accent`). Hardcoded color values are forbidden.",
        "enforcement": "ESLint rule (`@tailwindcss/no-custom-classname`) and code review."
      },
      "stateManagement": {
        "ruleId": "ARC-05",
        "description": "Use local state (React Hooks) by default. Lift state up when necessary. Use global state (Zustand) only for data that is truly shared across distant parts of the application tree (e.g., user authentication, export queue).",
        "enforcement": "Code review."
      }
    }
  }